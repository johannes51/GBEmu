cmake_minimum_required(VERSION 3.11)
project(gb-lib C CXX)

add_library(gbelib SHARED STATIC)
target_sources(gbelib PRIVATE
  constants.h
  defines.h
  apu/apu.h
  apu/apu.cpp
  apu/channel.h
  apu/gbchannel1.h
  apu/gbchannel1.cpp
  apu/gbchannel2.h
  apu/gbchannel2.cpp
  apu/gbchannel3.h
  apu/gbchannel3.cpp
  apu/gbchannel4.h
  apu/gbchannel4.cpp
  apu/gbmixer.h
  apu/gbmixer.cpp
  apu/iapu.h
  apu/imixer.h
  apu/channel_util/dac.h
  apu/channel_util/dac.cpp
  apu/channel_util/envelope.h
  apu/channel_util/envelope.cpp
  apu/channel_util/framesequencer.h
  apu/channel_util/framesequencer.cpp
  apu/channel_util/gbpulsechannel.h
  apu/channel_util/gbpulsechannel.cpp
  apu/channel_util/length.h
  apu/channel_util/length.cpp
  apu/channel_util/lengthch3.h
  apu/channel_util/lengthch3.cpp
  apu/channel_util/period.h
  apu/channel_util/period.cpp
  apu/channel_util/sweep.h
  apu/channel_util/sweep.cpp
  cpu/cpu.h
  cpu/cpu.cpp
  cpu/cpu_defines.h
  cpu/cpuflags.h
  cpu/cpuflags.cpp
  cpu/cpuregisters.h
  cpu/cpuregisters.cpp
  cpu/flagsview.h
  cpu/registersinterface.h
  cpu/id/baseinstructiondecoder.h
  cpu/id/baseinstructiondecoder.cpp
  cpu/id/basicrotatedecoder.h
  cpu/id/basicrotatedecoder.cpp
  cpu/id/bytearithmeticdecoder.h
  cpu/id/bytearithmeticdecoder.cpp
  cpu/id/byteloadsdecoder.h
  cpu/id/byteloadsdecoder.cpp
  cpu/id/cbdecoder.h
  cpu/id/cbdecoder.cpp
  cpu/id/cbopdecoder.h
  cpu/id/cbopdecoder.cpp
  cpu/id/controldecoder.h
  cpu/id/controldecoder.cpp
  cpu/id/instructiondecoder.h
  cpu/id/jumpscallsdecoder.h
  cpu/id/jumpscallsdecoder.cpp
  cpu/id/opcodeview.h
  cpu/id/opcodeview.cpp
  cpu/id/miscarithmeticdecoder.h
  cpu/id/miscarithmeticdecoder.cpp
  cpu/id/unimplementeddecoder.h
  cpu/id/unimplementeddecoder.cpp
  cpu/id/wordarithmeticdecoder.h
  cpu/id/wordarithmeticdecoder.cpp
  cpu/id/wordloadsdecoder.h
  cpu/id/wordloadsdecoder.cpp
  cpu/operation/basicrotate.h
  cpu/operation/basicrotate.cpp
  cpu/operation/bytealuoperation.h
  cpu/operation/bytealuoperation.cpp
  cpu/operation/byteloadstandard.h
  cpu/operation/byteloadstandard.cpp
  cpu/operation/byteloadindirect.h
  cpu/operation/byteloadindirect.cpp
  cpu/operation/byteloadimmediate.h
  cpu/operation/byteloadimmediate.cpp
  cpu/operation/byteloadoddball.h
  cpu/operation/byteloadoddball.cpp
  cpu/operation/cbprefix.h
  cpu/operation/cbprefix.cpp
  cpu/operation/control.h
  cpu/operation/control.cpp
  cpu/operation/jump.h
  cpu/operation/jump.cpp
  cpu/operation/miscarithmetic.h
  cpu/operation/miscarithmetic.cpp
  cpu/operation/operation.h
  cpu/operation/pushpop.h
  cpu/operation/pushpop.cpp
  cpu/operation/cbop.h
  cpu/operation/cbop.cpp
  cpu/operation/singleop.h
  cpu/operation/wordaluoperation.h
  cpu/operation/wordaluoperation.cpp
  cpu/operation/wordload.h
  cpu/operation/wordload.cpp
  gb_factories/apufactory.h
  gb_factories/apufactory.cpp
  gb_factories/apuregisterfactory.h
  gb_factories/apuregisterfactory.cpp
  gb_factories/cartloader.h
  gb_factories/cartloader.cpp
  gb_factories/gbfactory.h
  gb_factories/gbfactory.cpp
  gb_factories/instructionsetbuilder.h
  gb_factories/instructionsetbuilder.cpp
  gb_factories/memoryfactory.h
  gb_factories/memoryfactory.cpp
  gb_factories/peripheralregisterfactory.h
  gb_factories/peripheralregisterfactory.cpp
  gb_factories/ppufactory.h
  gb_factories/ppufactory.cpp
  gb_factories/ppuregisterfactory.h
  gb_factories/ppuregisterfactory.cpp
  gb_factories/registerfactory.h
  location/bufferlocation.h
  location/bufferlocation.cpp
  location/fusedlocation16.h
  location/fusedlocation16.cpp
  location/location16.h
  location/location8.h
  location/nulllocation.h
  location/nulllocation.cpp
  location/ramlocation.h
  location/ramlocation.cpp
  location/register16.h
  location/register16.cpp
  location/register8.h
  location/register8.cpp
  location/romlocation.h
  location/romlocation.cpp
  location/variablelocation.h
  location/variablelocation.cpp
  location/zerolocation.h
  location/zerolocation.cpp
  mem/bufferbank.h
  mem/bufferbank.cpp
  mem/imemoryview.h
  mem/imemorymanager.h
  mem/mem_defines.h
  mem/memoryarea.h
  mem/memoryarea.cpp
  mem/mirrorbank.h
  mem/mirrorbank.cpp
  mem/memorymanifold.h
  mem/memorymanifold.cpp
  mem/mem_tools.h
  mem/mem_tools.cpp
  mem/nullbank.h
  mem/nullbank.cpp
  mem/rambank.h
  mem/rambank.cpp
  mem/registerbank.h
  mem/registerbank.cpp
  mem/rombank.h
  mem/rombank.cpp
  mem/singleareamanager.h
  mem/singleareamanager.cpp
  mem/registers/iregisteradapter.h
  mem/registers/memoryregisteradapter.h
  mem/registers/memoryregisteradapter.cpp
  mem/registers/registerbankadapter.h
  mem/registers/registerbankadapter.cpp
  mem/registers/registerbuffer.h
  mem/registers/registerbuffer.cpp
  mem/registers/divregister.h
  mem/registers/divregister.cpp
  ops/arithmetic.h
  ops/arithmetic.cpp
  ops/bitmanip.h
  ops/bitmanip.cpp
  ops/logic.h
  ops/logic.cpp
  ops/ops.h
  ops/shiftrotate.h
  ops/shiftrotate.cpp
  peripherals/gbinterrupthandler.h
  peripherals/gbinterrupthandler.cpp
  peripherals/gbtimer.h
  peripherals/gbtimer.cpp
  peripherals/interrupthandler.h
  peripherals/joypad.h
  peripherals/joypad.cpp
  peripherals/tickable.h
  ppu/ippu.h
  ppu/irenderer.h
  ppu/gbrenderer.h
  ppu/gbrenderer.cpp
  ppu/pixelbuffer.h
  ppu/ppu.h
  ppu/ppu.cpp
  ppu/ppu_constants.h
  ppu/layer/colortransformation.h
  ppu/layer/gbbg.h
  ppu/layer/gbbg.cpp
  ppu/layer/gbobjects.h
  ppu/layer/gbobjects.cpp
  ppu/layer/gbpalette.h
  ppu/layer/gbpalette.cpp
  ppu/layer/gbwindow.h
  ppu/layer/gbwindow.cpp
  ppu/layer/helper.h
  ppu/layer/helper.cpp
  ppu/layer/ilayer.h
  ppu/layer/ibackground.h
  ppu/layer/iobjects.h
  ppu/layer/iwindow.h
  ppu/layer/oam.h
  ppu/layer/oam.cpp
  ppu/layer/object.h
  ppu/layer/object.cpp
  ppu/layer/tile.h
  ppu/layer/tile.cpp
  ppu/layer/tiledata.h
  ppu/layer/tiledata.cpp
  ppu/layer/tilemap.h
  ppu/layer/tilemap.cpp
  sys/systemmanager.cpp
  sys/systemmanager.h
  util/fallingedgedetector.h
  util/helpers.h
  util/helpers.cpp
  )

set_target_properties(gbelib PROPERTIES PUBLIC_HEADER "sys/systemmanager.h")
target_include_directories(gbelib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

if(${CMAKE_BUILD_TYPE} MATCHES "[Dd][Ee][Bb][Uu][Gg]" AND CODE_COVERAGE)
  target_code_coverage(gbelib)
endif()

cxx_20(gbelib)
enable_wall(gbelib)

clang_format(format_gbelib gbelib)
clang_tidy(gbelib)
cppcheck(gbelib)

build_docs()

install(TARGETS gbelib
  ARCHIVE DESTINATION CMAKE_ARCHIVE_OUTPUT_DIRECTORY
  PUBLIC_HEADER DESTINATION include/gbelib
  )
